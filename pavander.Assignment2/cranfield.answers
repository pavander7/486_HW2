# Paul Vander Woude (pavander)

I. Weighting Schemes
    1. tf.idf: This was the required weighitng scheme. It uses a combination of term frequency and document frequency to score relevance
    2. bm25: This scheme builds on tf.idf, but includes a few additional considerations. This scheme uses term frequency saturation to dampen the 
       impact of high term frequencies and normalizes by document length, meaning that long documents are not unfairly favored or penalized. It also
       does not consider term frequency when weighting queries, unlike tf.idf. Additionally, bm25 makes use of two tuning parameters, which can further
       improve performance

II. Macro-averaged Precision & Recall
document_weighting: tf.idf, query_weighting: tf.idf, cos_norm: 0
cutoff: 10 precision: 0.1791 recall: 0.3062
cutoff: 50 precision: 0.0755 recall: 0.5893
cutoff: 100 precision: 0.0468 recall: 0.7077
cutoff: 500 precision: 0.0126 recall: 0.8917

document_weighting: tf.idf, query_weighting: tf.idf, cos_norm: 1
cutoff: 10 precision: 0.2102 recall: 0.3511
cutoff: 50 precision: 0.0815 recall: 0.6306
cutoff: 100 precision: 0.0494 recall: 0.7363
cutoff: 500 precision: 0.0127 recall: 0.8997

document_weighting: bm25, query_weighting: bm25, cos_norm: 0
cutoff: 10 precision: 0.2138 recall: 0.3725
cutoff: 50 precision: 0.0804 recall: 0.6248
cutoff: 100 precision: 0.0475 recall: 0.7191
cutoff: 500 precision: 0.0126 recall: 0.8949

document_weighting: bm25, query_weighting: bm25, cos_norm: 1
cutoff: 10 precision: 0.2147 recall: 0.3745
cutoff: 50 precision: 0.0802 recall: 0.6188
cutoff: 100 precision: 0.0479 recall: 0.7184
cutoff: 500 precision: 0.0127 recall: 0.8970

III. Discussion
    The two weighting schemes performed very similarly, with only very minor variations between comparable results. The 10 and 50 cutoffs are the most 
interesting, as most queries resulted in fewer than 15 results. Interestingly, the only scheme that performed notably worse than the others was tf.idf
without cosine normalization.

IV. Documentation
USAGE: vectorspace.py DOC_WEIGHTING QUERY_WEIGHTING COSINE_NORM DOCUMENT_DIR TEST_QUERY_FILE ANSWERS [RELJUDGE_FILE] (VERBOSE)
        DOC_WEIGHTING MODE: tf.idf, bm25
        QUERY_WEIGHTING MODE: tf.idf, bm25
        COSINE_NORM: T/True/TRUE/true/1 OR F/False/FALSE/false/0
        DOCUMENT_DIR: Directory containing documents
        TEST_QUERY_FILE: File containing test queries
        ANSWERS: Enable answers evaluation (T/True/TRUE/true/1) or disable (F/False/FALSE/false/0)
        RELJUDGE_FILE: (Required if ANSWERS enabled) File with relevance judgments
        VERBOSE: (optional) Verbosity level (default 0, max 4)
